buildscript {
    ext {
        springBootVersion = '1.2.5.RELEASE'
        optimizeRjs = false
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'com.sourcemuse.gradle.plugin:gradle-mongo-plugin:0.4.0'
    }
}

plugins {
  id "org.grooscript.conversion" version "1.2.0"
}

apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'spring-boot' 
apply plugin: 'war'
apply plugin: 'mongo'

war {
    baseName = 'demo'
    version = '0.0.8-SNAPSHOT'
}
sourceCompatibility = 1.7
targetCompatibility = 1.7

repositories {
    mavenCentral()
}

configurations {
    providedRuntime
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter-data-mongodb")
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-websocket")
    compile("org.springframework:spring-messaging")
    compile("org.codehaus.groovy:groovy-all:2.4.4")
    compile("org.grooscript:grooscript:1.2.0") {
        exclude module: "groovy"
        exclude module: "groovy-json"
    }
    providedRuntime("org.springframework.boot:spring-boot-starter-tomcat")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    compile 'cglib:cglib-nodep:2.2'
    testCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
        exclude module: 'groovy-all'
        exclude module: 'junit-dep'
    }
}

springBoot {
    mainClass = "demo.Application"
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.5'
}

task templatesListen(type: org.grooscript.gradle.TemplatesThreadTask) {
    templatesPath = 'src/main/resources/templates'
    templates = ['bookList.gtpl', 'bookTable.gtpl', 'lastBook.gtpl']
    destinationFile = 'src/main/resources/static/js/app/Templates.js'
    classpath = ['src/main/groovy']
}

def optimizeRequireJs(withOutput = false) {
    def process = "r.js -o build.js".execute()
    process.waitForOrKill(12000)
    if (withOutput) {
        println "Require.js optimized: ${process.exitValue()}"
        println "Error:" + process.err.text
        println "Out:" + process.in.text
    }
}

spy {
    files = ['src/main/resources/static/js/app',
             'src/main/resources/static/css',
             'src/main/resources/static/js/demo.js']
    onChanges = { list ->
        if (list.any { it.endsWith('static/js/app/bookDemo.js') } && optimizeRjs) {
            optimizeRequireJs()
        }
        springWebsocketTo 'http://localhost:8080/demo' data 'templates' onChannel '/app/reload'
    }
}

task myRequire(type: org.grooscript.gradle.RequireJsThreadTask) {
    sourceFile = 'src/main/groovy/bookDemo.groovy'
    destinationFolder = 'src/main/resources/static/js/app'
    mainContextScope = ['$', 'location']
}

task rjs() << {
    optimizeRequireJs(true)
}

spyChanges.dependsOn templatesListen, myRequire
bootRun.dependsOn startManagedMongoDb, spyChanges
